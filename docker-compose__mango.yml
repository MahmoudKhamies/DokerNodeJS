version: "3"
services:
  node-app:
    container_name: express-node-app-container
    build: .
    volumes:
      - ./src:/app/src:ro
    ports:
      - "4000:4000"
    env_file:
      - ./.env
    depends_on:
      - postgres
      - mongo
      - redis
  postgres:
    image: postgres
    restart: always
    volumes:
      - postgres-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: example
  mongo:
    image: mongo
    restart: always
    volumes:
      - mongo-db:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      - mongo
  redis:
    image: redis
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
    depends_on:
      - node-app
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
volumes:
  mongo-db:
  postgres-db:

# postgres by default will write its data files in /var/lib/postgresql/data inside the container
# MongoDB by default will write its data files in /data/db inside the container
# mongo-express image is a pre-built Docker image that provides a web-based interface for managing MongoDB databases. 
  # It's a convenient way to interact with MongoDB without having to use the mongo shell directly.
  # Open a web browser and go to http://localhost:8081. You should see the mongo-express web interface.
# nginx reverse proxy: will be used to redirect the requests coming on nginx / to the node port 4000
  #1 create folder like "nginx" beside the compose file
  #2 create file "default.config" inside "nginx" folder for nginx configrations
  #3 set the proxy_pass http://node-app:4000;  [node service name : node service port]
  #4 for above point node-app should be started first so enginx can reun correctlly
  #5 use depends_on: - node-app for nginx in compose file to solve above issue
  #6 above "default.config" file should be exist in nginx path "/etc/nginx/conf.d/default.conf"
  #7 above step will be done using volumes in compose file for nginx
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d -build
  - above compose will create volume for  mangodb with name  AppName+'_'+volumeNme [my-express-app_mongo-db]
  - above compose will create network for both node,mangodb with name AppName+'_'+'default'
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml down
# docker-compose ps
# docker logs express-node-app-container -f  [explore mangodb logs like started or not ....]
# connect mango db
  - docker exec-it my-express-app_nongo_1 bash
  - mango -u root -p example
    - or 
  - docker exec-it my-express-app_nongo_1 mango -u root -p example
  - show dbs;
  - use dbName; [use testDB]
  - db.books.insert({title: "book 1"})
  - db.books.find()